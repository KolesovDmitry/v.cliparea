#!/usr/bin/env python
# -*- coding: utf-8  -*-
#
############################################################################
#
# MODULE:      v.cliparea
# AUTHOR(S):   Dmitry Kolesov (kolesov.dm@gmail.com);
#
# PURPOSE:     Cut from the first area part that is "neighbour" of the
#              centroid of the second area.
#
# COPYRIGHT:   (C) 2014 Dmitry Kolesov / NextGIS company
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
############################################################################

#%Module
#% description: Cut from the first area part that is "neighbour" of the centroid of the second area.
#%End
#%option
#% key: input
#% type: string
#% description: name of the input vector map
#% required : yes
#% multiple: no
#%end
#%option
#% key: cutter
#% type: string
#% description: name of the map used as cutter area
#% required : yes
#% multiple: no
#%end
#%option
#% key: output
#% type: string
#% description: name of the output vector map
#% required : yes
#% multiple: no
#%end


import string
import os, sys
import time
from math import sin, cos, sqrt

if "GISBASE" not in os.environ:
    print "You must be in GRASS GIS to run this program."
    sys.exit(1)

import grass.script as grass


def main(options, flags):
    in_map = options['input']
    cutter = options['cutter']
    out_map = options['output']
    
    # Get perimeter of the first area (it will be used as length of cutting line)
    p = grass.pipe_command('v.to.db', map=in_map, option='perimeter', flags='p')
    c = p.stdout.readline() # Column names
    c = p.stdout.readline() # Values
    p.wait()
    length = float(c.split('|')[1])
    
    # Centroid of the first area
    p = grass.pipe_command('v.out.ascii', input=in_map, fs=' ')
    c = p.stdout.readline()
    p.wait()
    x1,y1 = [float(t) for t in c.split()[:2]]
    
    # Centroid of the second area
    p = grass.pipe_command('v.out.ascii', input=cutter, fs=' ')
    c = p.stdout.readline()
    p.wait()
    x2,y2 = [float(t) for t in c.split()[:2]]

    dx, dy = x2-x1, y2-y1
    x_mean = (x2+x1)/2.0
    y_mean = (y2+y1)/2.0
    
    tmp_line = 'line_tmp_%d' % os.getpid()
    tmp_area = 'area_tmp_%d' % os.getpid()
    tmp_point = 'point_tmp_%d' % os.getpid()
    try:
        # Cut the area
        grass.run_command('v.extract', 
            input=in_map, output=tmp_point, type='centroid',
            overwrite=True, quiet=True
        )
        grass.run_command('./v.perpsegment', 
            output=tmp_line, xperp=dx, yperp=dy, x=x_mean, y=y_mean, length=length, 
            overwrite=True, quiet=True
        )
        grass.run_command('./v.splitpolygon', 
            input=in_map, line=tmp_line, out=tmp_area, 
            overwrite=True, quiet=True
        )
        grass.run_command('v.select',
            ainput=tmp_area, binput=tmp_point, out=out_map,
            overwrite=True, quiet=True
        )
        # Move centroid to the old place
        # (new area has centroid in a different place, restore the previouse centroid position)
        
        #~ p = grass.pipe_command('v.out.ascii', input=out_map, fs=' ')
        #~ c = p.stdout.readline()
        #~ p.wait()
        #~ x_new, y_new, cat = c.split()
        #~ x_new, y_new = float(x_new), float(y_new)
        #~ dx, dy = x1 - x_new, y1 - y_new
        #~ grass.run_command('v.edit', 
            #~ map=out_map, tool='move', move='%s,%s' % (dx,dy), type='centroid', cat=cat,
            #~ quiet=True
        #~ )
    finally:
        grass.run_command('g.remove', vect=tmp_line, quiet=True)
        grass.run_command('g.remove', vect=tmp_area, quiet=True)
        grass.run_command('g.remove', vect=tmp_point, quiet=True)
    
    

if __name__ == "__main__":
    options, flags = grass.parser()
    main(options, flags)
    sys.exit(0)

